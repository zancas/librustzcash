// This file is generated by rust-protobuf 2.1.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct BlockID {
    // message fields
    pub blockHeight: u64,
    pub blockHash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockID {
    pub fn new() -> BlockID {
        ::std::default::Default::default()
    }

    // uint64 blockHeight = 1;

    pub fn clear_blockHeight(&mut self) {
        self.blockHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockHeight(&mut self, v: u64) {
        self.blockHeight = v;
    }

    pub fn get_blockHeight(&self) -> u64 {
        self.blockHeight
    }

    // bytes blockHash = 2;

    pub fn clear_blockHash(&mut self) {
        self.blockHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_blockHash(&mut self, v: ::std::vec::Vec<u8>) {
        self.blockHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blockHash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.blockHash
    }

    // Take field
    pub fn take_blockHash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.blockHash, ::std::vec::Vec::new())
    }

    pub fn get_blockHash(&self) -> &[u8] {
        &self.blockHash
    }
}

impl ::protobuf::Message for BlockID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.blockHeight = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.blockHash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.blockHeight != 0 {
            my_size += ::protobuf::rt::value_size(1, self.blockHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.blockHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.blockHash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.blockHeight != 0 {
            os.write_uint64(1, self.blockHeight)?;
        }
        if !self.blockHash.is_empty() {
            os.write_bytes(2, &self.blockHash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockID {
        BlockID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "blockHeight",
                    |m: &BlockID| { &m.blockHeight },
                    |m: &mut BlockID| { &mut m.blockHeight },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "blockHash",
                    |m: &BlockID| { &m.blockHash },
                    |m: &mut BlockID| { &mut m.blockHash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockID>(
                    "BlockID",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockID {
        static mut instance: ::protobuf::lazy::Lazy<BlockID> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockID,
        };
        unsafe {
            instance.get(BlockID::new)
        }
    }
}

impl ::protobuf::Clear for BlockID {
    fn clear(&mut self) {
        self.clear_blockHeight();
        self.clear_blockHash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockID {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompactBlock {
    // message fields
    pub id: ::protobuf::SingularPtrField<BlockID>,
    pub vtx: ::protobuf::RepeatedField<CompactTx>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompactBlock {
    pub fn new() -> CompactBlock {
        ::std::default::Default::default()
    }

    // .proto.BlockID id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: BlockID) {
        self.id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut BlockID {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> BlockID {
        self.id.take().unwrap_or_else(|| BlockID::new())
    }

    pub fn get_id(&self) -> &BlockID {
        self.id.as_ref().unwrap_or_else(|| BlockID::default_instance())
    }

    // repeated .proto.CompactTx vtx = 3;

    pub fn clear_vtx(&mut self) {
        self.vtx.clear();
    }

    // Param is passed by value, moved
    pub fn set_vtx(&mut self, v: ::protobuf::RepeatedField<CompactTx>) {
        self.vtx = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vtx(&mut self) -> &mut ::protobuf::RepeatedField<CompactTx> {
        &mut self.vtx
    }

    // Take field
    pub fn take_vtx(&mut self) -> ::protobuf::RepeatedField<CompactTx> {
        ::std::mem::replace(&mut self.vtx, ::protobuf::RepeatedField::new())
    }

    pub fn get_vtx(&self) -> &[CompactTx] {
        &self.vtx
    }
}

impl ::protobuf::Message for CompactBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vtx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vtx)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.vtx {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.vtx {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompactBlock {
        CompactBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                    "id",
                    |m: &CompactBlock| { &m.id },
                    |m: &mut CompactBlock| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CompactTx>>(
                    "vtx",
                    |m: &CompactBlock| { &m.vtx },
                    |m: &mut CompactBlock| { &mut m.vtx },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompactBlock>(
                    "CompactBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompactBlock {
        static mut instance: ::protobuf::lazy::Lazy<CompactBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompactBlock,
        };
        unsafe {
            instance.get(CompactBlock::new)
        }
    }
}

impl ::protobuf::Clear for CompactBlock {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_vtx();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompactBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompactTx {
    // message fields
    pub txIndex: u64,
    pub txHash: ::std::vec::Vec<u8>,
    pub spends: ::protobuf::RepeatedField<CompactSpend>,
    pub outputs: ::protobuf::RepeatedField<CompactOutput>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompactTx {
    pub fn new() -> CompactTx {
        ::std::default::Default::default()
    }

    // uint64 txIndex = 1;

    pub fn clear_txIndex(&mut self) {
        self.txIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_txIndex(&mut self, v: u64) {
        self.txIndex = v;
    }

    pub fn get_txIndex(&self) -> u64 {
        self.txIndex
    }

    // bytes txHash = 2;

    pub fn clear_txHash(&mut self) {
        self.txHash.clear();
    }

    // Param is passed by value, moved
    pub fn set_txHash(&mut self, v: ::std::vec::Vec<u8>) {
        self.txHash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txHash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txHash
    }

    // Take field
    pub fn take_txHash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txHash, ::std::vec::Vec::new())
    }

    pub fn get_txHash(&self) -> &[u8] {
        &self.txHash
    }

    // repeated .proto.CompactSpend spends = 3;

    pub fn clear_spends(&mut self) {
        self.spends.clear();
    }

    // Param is passed by value, moved
    pub fn set_spends(&mut self, v: ::protobuf::RepeatedField<CompactSpend>) {
        self.spends = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spends(&mut self) -> &mut ::protobuf::RepeatedField<CompactSpend> {
        &mut self.spends
    }

    // Take field
    pub fn take_spends(&mut self) -> ::protobuf::RepeatedField<CompactSpend> {
        ::std::mem::replace(&mut self.spends, ::protobuf::RepeatedField::new())
    }

    pub fn get_spends(&self) -> &[CompactSpend] {
        &self.spends
    }

    // repeated .proto.CompactOutput outputs = 4;

    pub fn clear_outputs(&mut self) {
        self.outputs.clear();
    }

    // Param is passed by value, moved
    pub fn set_outputs(&mut self, v: ::protobuf::RepeatedField<CompactOutput>) {
        self.outputs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outputs(&mut self) -> &mut ::protobuf::RepeatedField<CompactOutput> {
        &mut self.outputs
    }

    // Take field
    pub fn take_outputs(&mut self) -> ::protobuf::RepeatedField<CompactOutput> {
        ::std::mem::replace(&mut self.outputs, ::protobuf::RepeatedField::new())
    }

    pub fn get_outputs(&self) -> &[CompactOutput] {
        &self.outputs
    }
}

impl ::protobuf::Message for CompactTx {
    fn is_initialized(&self) -> bool {
        for v in &self.spends {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outputs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.txIndex = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txHash)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.spends)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outputs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.txIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.txIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.txHash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.txHash);
        }
        for value in &self.spends {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.outputs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.txIndex != 0 {
            os.write_uint64(1, self.txIndex)?;
        }
        if !self.txHash.is_empty() {
            os.write_bytes(2, &self.txHash)?;
        }
        for v in &self.spends {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.outputs {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompactTx {
        CompactTx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "txIndex",
                    |m: &CompactTx| { &m.txIndex },
                    |m: &mut CompactTx| { &mut m.txIndex },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "txHash",
                    |m: &CompactTx| { &m.txHash },
                    |m: &mut CompactTx| { &mut m.txHash },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CompactSpend>>(
                    "spends",
                    |m: &CompactTx| { &m.spends },
                    |m: &mut CompactTx| { &mut m.spends },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CompactOutput>>(
                    "outputs",
                    |m: &CompactTx| { &m.outputs },
                    |m: &mut CompactTx| { &mut m.outputs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompactTx>(
                    "CompactTx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompactTx {
        static mut instance: ::protobuf::lazy::Lazy<CompactTx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompactTx,
        };
        unsafe {
            instance.get(CompactTx::new)
        }
    }
}

impl ::protobuf::Clear for CompactTx {
    fn clear(&mut self) {
        self.clear_txIndex();
        self.clear_txHash();
        self.clear_spends();
        self.clear_outputs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompactTx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactTx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompactSpend {
    // message fields
    pub nf: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompactSpend {
    pub fn new() -> CompactSpend {
        ::std::default::Default::default()
    }

    // bytes nf = 1;

    pub fn clear_nf(&mut self) {
        self.nf.clear();
    }

    // Param is passed by value, moved
    pub fn set_nf(&mut self, v: ::std::vec::Vec<u8>) {
        self.nf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nf(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nf
    }

    // Take field
    pub fn take_nf(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nf, ::std::vec::Vec::new())
    }

    pub fn get_nf(&self) -> &[u8] {
        &self.nf
    }
}

impl ::protobuf::Message for CompactSpend {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nf)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.nf.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.nf);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.nf.is_empty() {
            os.write_bytes(1, &self.nf)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompactSpend {
        CompactSpend::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nf",
                    |m: &CompactSpend| { &m.nf },
                    |m: &mut CompactSpend| { &mut m.nf },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompactSpend>(
                    "CompactSpend",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompactSpend {
        static mut instance: ::protobuf::lazy::Lazy<CompactSpend> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompactSpend,
        };
        unsafe {
            instance.get(CompactSpend::new)
        }
    }
}

impl ::protobuf::Clear for CompactSpend {
    fn clear(&mut self) {
        self.clear_nf();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompactSpend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactSpend {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompactOutput {
    // message fields
    pub cmu: ::std::vec::Vec<u8>,
    pub epk: ::std::vec::Vec<u8>,
    pub ciphertext: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CompactOutput {
    pub fn new() -> CompactOutput {
        ::std::default::Default::default()
    }

    // bytes cmu = 1;

    pub fn clear_cmu(&mut self) {
        self.cmu.clear();
    }

    // Param is passed by value, moved
    pub fn set_cmu(&mut self, v: ::std::vec::Vec<u8>) {
        self.cmu = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cmu(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.cmu
    }

    // Take field
    pub fn take_cmu(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.cmu, ::std::vec::Vec::new())
    }

    pub fn get_cmu(&self) -> &[u8] {
        &self.cmu
    }

    // bytes epk = 2;

    pub fn clear_epk(&mut self) {
        self.epk.clear();
    }

    // Param is passed by value, moved
    pub fn set_epk(&mut self, v: ::std::vec::Vec<u8>) {
        self.epk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_epk(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.epk
    }

    // Take field
    pub fn take_epk(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.epk, ::std::vec::Vec::new())
    }

    pub fn get_epk(&self) -> &[u8] {
        &self.epk
    }

    // bytes ciphertext = 3;

    pub fn clear_ciphertext(&mut self) {
        self.ciphertext.clear();
    }

    // Param is passed by value, moved
    pub fn set_ciphertext(&mut self, v: ::std::vec::Vec<u8>) {
        self.ciphertext = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ciphertext(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ciphertext
    }

    // Take field
    pub fn take_ciphertext(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ciphertext, ::std::vec::Vec::new())
    }

    pub fn get_ciphertext(&self) -> &[u8] {
        &self.ciphertext
    }
}

impl ::protobuf::Message for CompactOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.cmu)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.epk)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ciphertext)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cmu.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.cmu);
        }
        if !self.epk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.epk);
        }
        if !self.ciphertext.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.ciphertext);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.cmu.is_empty() {
            os.write_bytes(1, &self.cmu)?;
        }
        if !self.epk.is_empty() {
            os.write_bytes(2, &self.epk)?;
        }
        if !self.ciphertext.is_empty() {
            os.write_bytes(3, &self.ciphertext)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompactOutput {
        CompactOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "cmu",
                    |m: &CompactOutput| { &m.cmu },
                    |m: &mut CompactOutput| { &mut m.cmu },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "epk",
                    |m: &CompactOutput| { &m.epk },
                    |m: &mut CompactOutput| { &mut m.epk },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ciphertext",
                    |m: &CompactOutput| { &m.ciphertext },
                    |m: &mut CompactOutput| { &mut m.ciphertext },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CompactOutput>(
                    "CompactOutput",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CompactOutput {
        static mut instance: ::protobuf::lazy::Lazy<CompactOutput> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CompactOutput,
        };
        unsafe {
            instance.get(CompactOutput::new)
        }
    }
}

impl ::protobuf::Clear for CompactOutput {
    fn clear(&mut self) {
        self.clear_cmu();
        self.clear_epk();
        self.clear_ciphertext();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompactOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bblock.proto\x12\x05proto\"I\n\x07BlockID\x12\x20\n\x0bblockHeight\
    \x18\x01\x20\x01(\x04R\x0bblockHeight\x12\x1c\n\tblockHash\x18\x02\x20\
    \x01(\x0cR\tblockHash\"R\n\x0cCompactBlock\x12\x1e\n\x02id\x18\x01\x20\
    \x01(\x0b2\x0e.proto.BlockIDR\x02id\x12\"\n\x03vtx\x18\x03\x20\x03(\x0b2\
    \x10.proto.CompactTxR\x03vtx\"\x9a\x01\n\tCompactTx\x12\x18\n\x07txIndex\
    \x18\x01\x20\x01(\x04R\x07txIndex\x12\x16\n\x06txHash\x18\x02\x20\x01(\
    \x0cR\x06txHash\x12+\n\x06spends\x18\x03\x20\x03(\x0b2\x13.proto.Compact\
    SpendR\x06spends\x12.\n\x07outputs\x18\x04\x20\x03(\x0b2\x14.proto.Compa\
    ctOutputR\x07outputs\"\x1e\n\x0cCompactSpend\x12\x0e\n\x02nf\x18\x01\x20\
    \x01(\x0cR\x02nf\"S\n\rCompactOutput\x12\x10\n\x03cmu\x18\x01\x20\x01(\
    \x0cR\x03cmu\x12\x10\n\x03epk\x18\x02\x20\x01(\x0cR\x03epk\x12\x1e\n\nci\
    phertext\x18\x03\x20\x01(\x0cR\nciphertextb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
